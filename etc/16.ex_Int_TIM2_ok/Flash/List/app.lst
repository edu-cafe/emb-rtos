###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      23/Jun/2013  20:20:40 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Embedded2\현대모비스\RTOS_CM3\MyData\src_my\uCOS-II-M #
#                    32_ok\EvalBoards\ST\MANGO-Z1\IAR\16.ex_Int_TIM2\app.c    #
#    Command line =  D:\Embedded2\현대모비스\RTOS_CM3\MyData\src_my\uCOS-II-M #
#                    32_ok\EvalBoards\ST\MANGO-Z1\IAR\16.ex_Int_TIM2\app.c    #
#                    -lCN D:\Embedded2\현대모비스\RTOS_CM3\MyData\src_my\uCOS #
#                    -II-M32_ok\EvalBoards\ST\MANGO-Z1\IAR\16.ex_Int_TIM2\Fla #
#                    sh\List\ -o D:\Embedded2\현대모비스\RTOS_CM3\MyData\src_ #
#                    my\uCOS-II-M32_ok\EvalBoards\ST\MANGO-Z1\IAR\16.ex_Int_T #
#                    IM2\Flash\Obj\ --no_cse --no_unroll --no_inline          #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I D:\Embedded2\현대모비스\RTOS_CM3\MyData\src_my #
#                    \uCOS-II-M32_ok\EvalBoards\ST\MANGO-Z1\IAR\16.ex_Int_TIM #
#                    2\ -I D:\Embedded2\현대모비스\RTOS_CM3\MyData\src_my\uCO #
#                    S-II-M32_ok\EvalBoards\ST\MANGO-Z1\IAR\16.ex_Int_TIM2\.. #
#                    \BSP\ -I D:\Embedded2\현대모비스\RTOS_CM3\MyData\src_my\ #
#                    uCOS-II-M32_ok\EvalBoards\ST\MANGO-Z1\IAR\16.ex_Int_TIM2 #
#                    \..\..\..\..\..\CPU\ST\STM32\inc\ -I                     #
#                    D:\Embedded2\현대모비스\RTOS_CM3\MyData\src_my\uCOS-II-M #
#                    32_ok\EvalBoards\ST\MANGO-Z1\IAR\16.ex_Int_TIM2\..\..\.. #
#                    \..\..\uC-CPU\ -I D:\Embedded2\현대모비스\RTOS_CM3\MyDat #
#                    a\src_my\uCOS-II-M32_ok\EvalBoards\ST\MANGO-Z1\IAR\16.ex #
#                    _Int_TIM2\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\ -I    #
#                    D:\Embedded2\현대모비스\RTOS_CM3\MyData\src_my\uCOS-II-M #
#                    32_ok\EvalBoards\ST\MANGO-Z1\IAR\16.ex_Int_TIM2\..\..\.. #
#                    \..\..\uC-LCD\Source\ -I D:\Embedded2\현대모비스\RTOS_CM #
#                    3\MyData\src_my\uCOS-II-M32_ok\EvalBoards\ST\MANGO-Z1\IA #
#                    R\16.ex_Int_TIM2\..\..\..\..\..\uC-LIB\ -I               #
#                    D:\Embedded2\현대모비스\RTOS_CM3\MyData\src_my\uCOS-II-M #
#                    32_ok\EvalBoards\ST\MANGO-Z1\IAR\16.ex_Int_TIM2\..\..\.. #
#                    \..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\ -I       #
#                    D:\Embedded2\현대모비스\RTOS_CM3\MyData\src_my\uCOS-II-M #
#                    32_ok\EvalBoards\ST\MANGO-Z1\IAR\16.ex_Int_TIM2\..\..\.. #
#                    \..\..\uCOS-II\Source\ -I D:\Embedded2\현대모비스\RTOS_C #
#                    M3\MyData\src_my\uCOS-II-M32_ok\EvalBoards\ST\MANGO-Z1\I #
#                    AR\16.ex_Int_TIM2\..\..\..\..\..\uC-Probe\Target\Communi #
#                    cation\Generic\RS-232\Source\ -I                         #
#                    D:\Embedded2\현대모비스\RTOS_CM3\MyData\src_my\uCOS-II-M #
#                    32_ok\EvalBoards\ST\MANGO-Z1\IAR\16.ex_Int_TIM2\..\..\.. #
#                    \..\..\uC-Probe\Target\Communication\Generic\RS-232\Port #
#                    s\ST\STM32\ -I D:\Embedded2\현대모비스\RTOS_CM3\MyData\s #
#                    rc_my\uCOS-II-M32_ok\EvalBoards\ST\MANGO-Z1\IAR\16.ex_In #
#                    t_TIM2\..\..\..\..\..\uC-Probe\Target\Communication\Gene #
#                    ric\Source\ -I D:\Embedded2\현대모비스\RTOS_CM3\MyData\s #
#                    rc_my\uCOS-II-M32_ok\EvalBoards\ST\MANGO-Z1\IAR\16.ex_In #
#                    t_TIM2\..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II\   #
#                    -Ol --use_c++_inline                                     #
#    List file    =  D:\Embedded2\현대모비스\RTOS_CM3\MyData\src_my\uCOS-II-M #
#                    32_ok\EvalBoards\ST\MANGO-Z1\IAR\16.ex_Int_TIM2\Flash\Li #
#                    st\app.lst                                               #
#    Object file  =  D:\Embedded2\현대모비스\RTOS_CM3\MyData\src_my\uCOS-II-M #
#                    32_ok\EvalBoards\ST\MANGO-Z1\IAR\16.ex_Int_TIM2\Flash\Ob #
#                    j\app.o                                                  #
#                                                                             #
#                                                                             #
###############################################################################

D:\Embedded2\현대모비스\RTOS_CM3\MyData\src_my\uCOS-II-M32_ok\EvalBoards\ST\MANGO-Z1\IAR\16.ex_Int_TIM2\app.c
      1          /*
      2          *********************************************************************************************************
      3          *                                              EXAMPLE CODE
      4          *
      5          *                          (c) Copyright 2003-2006; Micrium, Inc.; Weston, FL
      6          *
      7          *               All rights reserved.  Protected by international copyright laws.
      8          *               Knowledge of the source code may NOT be used to develop a similar product.
      9          *               Please help us continue to provide the Embedded community with the finest
     10          *               software available.  Your honesty is greatly appreciated.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                            EXAMPLE CODE
     18          *
     19          *                                     ST Microelectronics STM32
     20          *                                              with the
     21          *                                   STM3210B-EVAL Evaluation Board
     22          *
     23          * Filename      : app.c
     24          * Version       : V1.10
     25          * Programmer(s) : BAN
     26          *********************************************************************************************************
     27          */
     28          
     29          
     30          /*
     31          *********************************************************************************************************
     32          *                                             INCLUDE FILES
     33          *********************************************************************************************************
     34          */
     35          
     36          #include <includes.h>
     37          
     38          
     39          /*
     40          *********************************************************************************************************
     41          *                                            LOCAL DEFINES
     42          *********************************************************************************************************
     43          */
     44          
     45          
     46          /*
     47          *********************************************************************************************************
     48          *                                       LOCAL GLOBAL VARIABLES
     49          *********************************************************************************************************
     50          */
     51          
     52          #define  TASK_STK_SIZE                 512
     53          

   \                                 In section .bss, align 4
     54          static  OS_STK         App_TaskStartStk[APP_TASK_START_STK_SIZE];
   \                     App_TaskStartStk:
   \   00000000                      DS8 512
     55          

   \                                 In section .bss, align 4
     56          static  OS_STK         Task1_Stk[TASK_STK_SIZE];
   \                     Task1_Stk:
   \   00000000                      DS8 2048

   \                                 In section .bss, align 4
     57          static  OS_STK         Task2_Stk[TASK_STK_SIZE];
   \                     Task2_Stk:
   \   00000000                      DS8 2048
     58          
     59          
     60          
     61          /*
     62          *********************************************************************************************************
     63          *                                      LOCAL FUNCTION PROTOTYPES
     64          *********************************************************************************************************
     65          */
     66          
     67          static  void  App_TaskStart        (void        *p_arg);
     68          
     69          void   Task1(void *data); 
     70          void   Task2(void *data);
     71          
     72          
     73          void MyTIM2_Init();
     74          
     75          /*
     76          *********************************************************************************************************
     77          *                                                main()
     78          *
     79          * Description : This is the standard entry point for C code.  It is assumed that your code will call
     80          *               main() once you have performed all necessary initialization.
     81          *
     82          * Argument(s) : none.
     83          *
     84          * Return(s)   : none.
     85          *********************************************************************************************************
     86          */
     87          
     88          #ifndef SOO
     89          
     90          #include "stm32f10x_usart.h"
     91          #include "stm32f10x_gpio.h"
     92          
     93          #define TXE     7
     94          #define RXNE    5
     95          

   \                                 In section .text, align 2, keep-with-next
     96          void PutChar(char c)
     97          {
   \                     PutChar:
   \   00000000   0xB580             PUSH     {R7,LR}
     98            while((USART1->SR & (1<<TXE)) == 0);
   \                     ??PutChar_0:
   \   00000002   0x....             LDR.N    R1,??DataTable6  ;; 0x40013800
   \   00000004   0x8809             LDRH     R1,[R1, #+0]
   \   00000006   0x0609             LSLS     R1,R1,#+24
   \   00000008   0xD5FB             BPL.N    ??PutChar_0
     99            USART1->DR = c;
   \   0000000A   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40013804
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x8008             STRH     R0,[R1, #+0]
    100            if(c == '\n') PutChar('\r');
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x280A             CMP      R0,#+10
   \   00000014   0xD102             BNE.N    ??PutChar_1
   \   00000016   0x200D             MOVS     R0,#+13
   \   00000018   0xF7FF 0xFFF2      BL       PutChar
    101          }
   \                     ??PutChar_1:
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return
    102          

   \                                 In section .text, align 2, keep-with-next
    103          char GetChar(void)
    104          {
   \                     GetChar:
   \   00000000   0xB510             PUSH     {R4,LR}
    105            char data;
    106            
    107            while(!(USART1->SR & (1<<RXNE)));
   \                     ??GetChar_0:
   \   00000002   0x....             LDR.N    R0,??DataTable6  ;; 0x40013800
   \   00000004   0x8800             LDRH     R0,[R0, #+0]
   \   00000006   0x0680             LSLS     R0,R0,#+26
   \   00000008   0xD5FB             BPL.N    ??GetChar_0
    108            data = USART1->DR;
   \   0000000A   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40013804
   \   0000000C   0x8804             LDRH     R4,[R0, #+0]
    109            if(data == '\r') PutChar('\n');   //echo
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0x2C0D             CMP      R4,#+13
   \   00000012   0xD103             BNE.N    ??GetChar_1
   \   00000014   0x200A             MOVS     R0,#+10
   \   00000016   0x.... 0x....      BL       PutChar
   \   0000001A   0xE003             B.N      ??GetChar_2
    110            else PutChar(data);   //echo
   \                     ??GetChar_1:
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x.... 0x....      BL       PutChar
    111            
    112            return data;
   \                     ??GetChar_2:
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
    113          }
    114          

   \                                 In section .text, align 2, keep-with-next
    115          void Puts(char *str)
    116          {
   \                     Puts:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0xE003             B.N      ??Puts_0
    117            while(*str) {
    118              PutChar(*str);
   \                     ??Puts_1:
   \   00000006   0x7820             LDRB     R0,[R4, #+0]
   \   00000008   0x.... 0x....      BL       PutChar
    119              str++;
   \   0000000C   0x1C64             ADDS     R4,R4,#+1
    120            }
   \                     ??Puts_0:
   \   0000000E   0x7820             LDRB     R0,[R4, #+0]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD1F8             BNE.N    ??Puts_1
    121          }
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    122          

   \                                 In section .text, align 2, keep-with-next
    123          void Gets(char *buff)
    124          {
   \                     Gets:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0xE001             B.N      ??Gets_0
    125            char data;
    126            
    127            while(1) {
    128              data = GetChar();
    129              if(data == '\r' || data == '\n') break;
    130              *buff = data;
   \                     ??Gets_1:
   \   00000006   0x7020             STRB     R0,[R4, #+0]
    131              buff++;
   \   00000008   0x1C64             ADDS     R4,R4,#+1
   \                     ??Gets_0:
   \   0000000A   0x.... 0x....      BL       GetChar
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x280D             CMP      R0,#+13
   \   00000012   0xD002             BEQ.N    ??Gets_2
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x280A             CMP      R0,#+10
   \   00000018   0xD1F5             BNE.N    ??Gets_1
    132            }
    133            *buff = '\0';
   \                     ??Gets_2:
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x7020             STRB     R0,[R4, #+0]
    134          }
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
    135          
    136          

   \                                 In section .text, align 2, keep-with-next
    137          void USART1_Init(void)
    138          {
   \                     USART1_Init:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    139              USART_InitTypeDef USART_InitStructure;
    140          
    141          
    142              
    143              /* USARTx configuration ------------------------------------------------------*/
    144              /* USARTx configured as follow:
    145               - BaudRate = 115200 baud  
    146               - Word Length = 8 Bits
    147               - One Stop Bit
    148               - No parity
    149               - Hardware flow control disabled (RTS and CTS signals)
    150               - Receive and transmit enabled
    151               */
    152              USART_InitStructure.USART_BaudRate   = 115200;
   \   00000004   0xF45F 0x30E1      MOVS     R0,#+115200
   \   00000008   0x9000             STR      R0,[SP, #+0]
    153              USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    154              USART_InitStructure.USART_StopBits   = USART_StopBits_1;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    155              USART_InitStructure.USART_Parity     = USART_Parity_No ;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    156              USART_InitStructure.USART_HardwareFlowControl
    157                                                   = USART_HardwareFlowControl_None;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    158              USART_InitStructure.USART_Mode       = USART_Mode_Rx | USART_Mode_Tx;
   \   00000022   0x200C             MOVS     R0,#+12
   \   00000024   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    159          
    160              /* Configure the USARTx */ 
    161              USART_Init(USART1, &USART_InitStructure);
   \   00000028   0xA900             ADD      R1,SP,#+0
   \   0000002A   0x....             LDR.N    R0,??DataTable6  ;; 0x40013800
   \   0000002C   0x.... 0x....      BL       USART_Init
    162          
    163              /* Enable the USART1 */
    164              USART_Cmd(USART1, ENABLE);
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0x....             LDR.N    R0,??DataTable6  ;; 0x40013800
   \   00000034   0x.... 0x....      BL       USART_Cmd
    165          }
   \   00000038   0xB005             ADD      SP,SP,#+20
   \   0000003A   0xBD00             POP      {PC}             ;; return
    166          

   \                                 In section .text, align 2, keep-with-next
    167          void GPIO_Configuration(void)
    168          {
   \                     GPIO_Configuration:
   \   00000000   0xB580             PUSH     {R7,LR}
    169              GPIO_InitTypeDef GPIO_InitStructure;
    170              
    171          	/* Enable GPIOA clock */
    172              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2004             MOVS     R0,#+4
   \   00000006   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
    173              /* Enable USART1 clocks */
    174              RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0xF44F 0x4080      MOV      R0,#+16384
   \   00000010   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
    175              
    176          
    177              // UART configuration ...
    178          
    179              /* Configure USARTx_Tx as alternate function push-pull */
    180              GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_9;
   \   00000014   0xF44F 0x7000      MOV      R0,#+512
   \   00000018   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    181              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000001C   0x2003             MOVS     R0,#+3
   \   0000001E   0xF88D 0x0002      STRB     R0,[SP, #+2]
    182              GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF_PP;
   \   00000022   0x2018             MOVS     R0,#+24
   \   00000024   0xF88D 0x0003      STRB     R0,[SP, #+3]
    183              GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000028   0xA900             ADD      R1,SP,#+0
   \   0000002A   0x....             LDR.N    R0,??DataTable6_2  ;; 0x40010800
   \   0000002C   0x.... 0x....      BL       GPIO_Init
    184          
    185              /* Configure USARTx_Rx as input floating */
    186              GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_10;
   \   00000030   0xF44F 0x6080      MOV      R0,#+1024
   \   00000034   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    187              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   \   00000038   0x2004             MOVS     R0,#+4
   \   0000003A   0xF88D 0x0003      STRB     R0,[SP, #+3]
    188              GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   0000003E   0xA900             ADD      R1,SP,#+0
   \   00000040   0x....             LDR.N    R0,??DataTable6_2  ;; 0x40010800
   \   00000042   0x.... 0x....      BL       GPIO_Init
    189              
    190             
    191              //USART_SendData() 사용 시 필요함
    192              //GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_0;
    193              //GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    194              //GPIO_Init(GPIOB, &GPIO_InitStructure);
    195          }
   \   00000046   0xBD01             POP      {R0,PC}          ;; return
    196          
    197          #endif
    198          
    199          

   \                                 In section .text, align 2, keep-with-next
    200          int  main (void)
    201          {
   \                     main:
   \   00000000   0xB580             PUSH     {R7,LR}
    202              CPU_INT08U  os_err;
    203          
    204          	//added by SOO
    205              GPIO_Configuration();
   \   00000002   0x.... 0x....      BL       GPIO_Configuration
    206              USART1_Init(); 
   \   00000006   0x.... 0x....      BL       USART1_Init
    207          
    208              Puts("\nmain start!\n");
   \   0000000A   0x....             LDR.N    R0,??DataTable6_3
   \   0000000C   0x.... 0x....      BL       Puts
    209              
    210              BSP_IntDisAll();   	/* Disable all ints until we are ready to accept them.  */
   \   00000010   0x.... 0x....      BL       BSP_IntDisAll
    211          	Puts("\nBSP_IntDisAll() done!\n");
   \   00000014   0x....             LDR.N    R0,??DataTable6_4
   \   00000016   0x.... 0x....      BL       Puts
    212          	
    213              OSInit();  			/* Initialize "uC/OS-II, The Real-Time Kernel".         */
   \   0000001A   0x.... 0x....      BL       OSInit
    214          	Puts("\nOSInit() done!\n");
   \   0000001E   0x....             LDR.N    R0,??DataTable6_5
   \   00000020   0x.... 0x....      BL       Puts
    215          	
    216          #if 0
    217              os_err = OSTaskCreateExt((void (*)(void *)) App_TaskStart,  /* Create the start task.                               */
    218                                       (void          * ) 0,
    219                                       (OS_STK        * )&App_TaskStartStk[APP_TASK_START_STK_SIZE - 1],
    220                                       (INT8U           ) APP_TASK_START_PRIO,
    221                                       (INT16U          ) APP_TASK_START_PRIO,
    222                                       (OS_STK        * )&App_TaskStartStk[0],
    223                                       (INT32U          ) APP_TASK_START_STK_SIZE,
    224                                       (void          * )0,
    225                                       (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));
    226          #endif
    227          	os_err = OSTaskCreate((void (*)(void *)) App_TaskStart,  /* Create the start task.                               */
    228                                       (void          * ) 0,
    229                                       (OS_STK        * )&App_TaskStartStk[APP_TASK_START_STK_SIZE - 1],
    230                                       //(INT8U           ) APP_TASK_START_PRIO
    231                                       (INT8U           ) 5
    232                                       );
   \   00000024   0x2305             MOVS     R3,#+5
   \   00000026   0x....             LDR.N    R2,??DataTable6_6
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x.... 0x....      ADR.W    R0,App_TaskStart
   \   0000002E   0x.... 0x....      BL       OSTaskCreate
   \   00000032   0xF88D 0x0000      STRB     R0,[SP, #+0]
    233          #if (OS_TASK_NAME_SIZE >= 11)
    234              OSTaskNameSet(APP_TASK_START_PRIO, (CPU_INT08U *)"Start Task", &os_err);
   \   00000036   0xAA00             ADD      R2,SP,#+0
   \   00000038   0x....             LDR.N    R1,??DataTable6_7
   \   0000003A   0x2003             MOVS     R0,#+3
   \   0000003C   0x.... 0x....      BL       OSTaskNameSet
    235          #endif
    236          
    237              OSStart();
   \   00000040   0x.... 0x....      BL       OSStart
    238              Puts("\nOSStart() done!\n");                                                  /* Start multitasking (i.e. give control to uC/OS-II).  */
   \   00000044   0x....             LDR.N    R0,??DataTable6_8
   \   00000046   0x.... 0x....      BL       Puts
    239          
    240              return (0);
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0xBD02             POP      {R1,PC}          ;; return
    241          }
    242          
    243          
    244          
    245          /*
    246          *********************************************************************************************************
    247          *                                          App_TaskStart()
    248          *
    249          * Description : The startup task.  The uC/OS-II ticker should only be initialize once multitasking starts.
    250          *
    251          * Argument(s) : p_arg       Argument passed to 'App_TaskStart()' by 'OSTaskCreate()'.
    252          *
    253          * Return(s)   : none.
    254          *
    255          * Caller(s)   : This is a task.
    256          *
    257          * Note(s)     : none.
    258          *********************************************************************************************************
    259          */
    260          

   \                                 In section .text, align 4, keep-with-next
    261          static  void  App_TaskStart (void *p_arg)
    262          {
   \                     App_TaskStart:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB0A1             SUB      SP,SP,#+132
    263          	char buff[128];
    264          	
    265              (void)p_arg;
    266          
    267              INT8U  err;
    268          	
    269          	Puts("\nApp_TaskStart() start!\n");
   \   00000004   0x....             LDR.N    R0,??DataTable6_9
   \   00000006   0x.... 0x....      BL       Puts
    270          	
    271              BSP_Init(); 		/* Initialize BSP functions.                            */
   \   0000000A   0x.... 0x....      BL       BSP_Init
    272              
    273              //added by SOO
    274              GPIO_Configuration();
   \   0000000E   0x.... 0x....      BL       GPIO_Configuration
    275              USART1_Init(); 
   \   00000012   0x.... 0x....      BL       USART1_Init
    276          
    277              //Puts("\nBSP_Init() done!\n");
    278              sprintf(buff,"\nBSP_Init() done_%d!\n", 1);
   \   00000016   0x2201             MOVS     R2,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable6_10
   \   0000001A   0xA800             ADD      R0,SP,#+0
   \   0000001C   0x.... 0x....      BL       sprintf
    279              Puts(buff);
   \   00000020   0xA800             ADD      R0,SP,#+0
   \   00000022   0x.... 0x....      BL       Puts
    280                  
    281                                                          
    282              OS_CPU_SysTickInit();            /* Initialize the SysTick.                              */
   \   00000026   0x.... 0x....      BL       OS_CPU_SysTickInit
    283          	
    284              Puts("\nOS_CPU_SysTickInit() done!\n");       
   \   0000002A   0x....             LDR.N    R0,??DataTable6_11
   \   0000002C   0x.... 0x....      BL       Puts
    285          
    286          
    287          #if (OS_TASK_STAT_EN > 0)
    288              OSStatInit();                    /* Determine CPU capacity.  
   \   00000030   0x.... 0x....      BL       OSStatInit
    289              Puts("\nOSStatInit() done!\n");                              */
    290          #endif
    291          
    292          
    293              BSP_LED_Off(0);
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x.... 0x....      BL       BSP_LED_Off
    294              //OSTimeDlyHMSM(0, 0, 0, 1000);
    295              
    296              
    297          	MyTIM2_Init();
   \   0000003A   0x.... 0x....      BL       MyTIM2_Init
    298          	Puts("\nMyTIM2_Init() Done!\n");
   \   0000003E   0x....             LDR.N    R0,??DataTable6_12
   \   00000040   0x.... 0x....      BL       Puts
    299          
    300          
    301              err = OSTaskCreate(Task1,"Task1",&Task1_Stk[TASK_STK_SIZE - 1],8);
   \   00000044   0x2308             MOVS     R3,#+8
   \   00000046   0x....             LDR.N    R2,??DataTable6_13
   \   00000048   0x....             LDR.N    R1,??DataTable6_14
   \   0000004A   0x.... 0x....      ADR.W    R0,Task1
   \   0000004E   0x.... 0x....      BL       OSTaskCreate
    302          	sprintf(buff,"\nTask1 Create(err:%d)\n", err);
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0x0002             MOVS     R2,R0
   \   00000056   0x....             LDR.N    R1,??DataTable6_15
   \   00000058   0xA800             ADD      R0,SP,#+0
   \   0000005A   0x.... 0x....      BL       sprintf
    303          	Puts(buff);
   \   0000005E   0xA800             ADD      R0,SP,#+0
   \   00000060   0x.... 0x....      BL       Puts
    304          	err = OSTaskCreate(Task2,"Task2",&Task2_Stk[TASK_STK_SIZE - 1],9);
   \   00000064   0x2309             MOVS     R3,#+9
   \   00000066   0x....             LDR.N    R2,??DataTable6_16
   \   00000068   0x....             LDR.N    R1,??DataTable6_17
   \   0000006A   0x.... 0x....      ADR.W    R0,Task2
   \   0000006E   0x.... 0x....      BL       OSTaskCreate
    305          	sprintf(buff,"\nTask2 Create(err:%d)\n", err);
   \   00000072   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000074   0x0002             MOVS     R2,R0
   \   00000076   0x....             LDR.N    R1,??DataTable6_18
   \   00000078   0xA800             ADD      R0,SP,#+0
   \   0000007A   0x.... 0x....      BL       sprintf
    306          	Puts(buff);
   \   0000007E   0xA800             ADD      R0,SP,#+0
   \   00000080   0x.... 0x....      BL       Puts
    307          	
    308              while (1) { /* Task body, always written as an infinite loop. */
    309                  sprintf(buff,"\nRunning Task : %5d\n", OSTaskCtr);     /* Display #tasks running                  */
   \                     ??App_TaskStart_0:
   \   00000084   0x....             LDR.N    R0,??DataTable6_19
   \   00000086   0x7802             LDRB     R2,[R0, #+0]
   \   00000088   0x....             LDR.N    R1,??DataTable6_20
   \   0000008A   0xA800             ADD      R0,SP,#+0
   \   0000008C   0x.... 0x....      BL       sprintf
    310          		Puts(buff);
   \   00000090   0xA800             ADD      R0,SP,#+0
   \   00000092   0x.... 0x....      BL       Puts
    311          		sprintf(buff,"Cpu Usage : %3d\n", OSCPUUsage);       /* Display CPU usage in %                  */
   \   00000096   0x....             LDR.N    R0,??DataTable6_21
   \   00000098   0x7802             LDRB     R2,[R0, #+0]
   \   0000009A   0x....             LDR.N    R1,??DataTable6_22
   \   0000009C   0xA800             ADD      R0,SP,#+0
   \   0000009E   0x.... 0x....      BL       sprintf
    312          		Puts(buff);	
   \   000000A2   0xA800             ADD      R0,SP,#+0
   \   000000A4   0x.... 0x....      BL       Puts
    313          												
    314          		/* Display #context switches per second    */
    315          		sprintf(buff,"Context Switches per Sec : %5d\n",(int)OSCtxSwCtr);  
   \   000000A8   0x....             LDR.N    R0,??DataTable6_23
   \   000000AA   0x6802             LDR      R2,[R0, #+0]
   \   000000AC   0x....             LDR.N    R1,??DataTable6_24
   \   000000AE   0xA800             ADD      R0,SP,#+0
   \   000000B0   0x.... 0x....      BL       sprintf
    316          		Puts(buff);
   \   000000B4   0xA800             ADD      R0,SP,#+0
   \   000000B6   0x.... 0x....      BL       Puts
    317          		OSCtxSwCtr = 0;
   \   000000BA   0x....             LDR.N    R0,??DataTable6_23
   \   000000BC   0x2100             MOVS     R1,#+0
   \   000000BE   0x6001             STR      R1,[R0, #+0]
    318          		OSTimeDlyHMSM(0, 0, 1, 0);                         /* Wait one second                         */
   \   000000C0   0x2300             MOVS     R3,#+0
   \   000000C2   0x2201             MOVS     R2,#+1
   \   000000C4   0x2100             MOVS     R1,#+0
   \   000000C6   0x2000             MOVS     R0,#+0
   \   000000C8   0x.... 0x....      BL       OSTimeDlyHMSM
   \   000000CC   0xE7DA             B.N      ??App_TaskStart_0
    319          	}
    320          
    321          }
    322          
    323          
    324          /*
    325          *********************************************************************************************************
    326          *                                                  TASKS
    327          *********************************************************************************************************
    328          */
    329          
    330          

   \                                 In section .text, align 2, keep-with-next
    331          void MyISR_TIM2(void)
    332          {
   \                     MyISR_TIM2:
   \   00000000   0xB580             PUSH     {R7,LR}
    333          	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000008   0x.... 0x....      BL       TIM_ClearITPendingBit
    334          	
    335          	BSP_LED_Toggle(1);
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      BL       BSP_LED_Toggle
    336          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    337          
    338          
    339          //SysTick : 1ms
    340          //os_cfg.h : #define OS_TICKS_PER_SEC       1000

   \                                 In section .text, align 2, keep-with-next
    341          void TIM2_Configuration(void)
    342          { 
   \                     TIM2_Configuration:
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
    343              TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    344          
    345              /* TIM2 configuration */
    346              TIM_TimeBaseStructure.TIM_Period = 0x4AF;          
   \   00000002   0xF240 0x40AF      MOVW     R0,#+1199
   \   00000006   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    347              TIM_TimeBaseStructure.TIM_Prescaler = 0xEA5F;       
   \   0000000A   0xF64E 0x205F      MOVW     R0,#+59999
   \   0000000E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    348              TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;    
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    349              TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    350              TIM_TimeBaseStructure.TIM_RepetitionCounter = 0x0000;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xF88D 0x0008      STRB     R0,[SP, #+8]
    351              TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
   \   00000024   0xA900             ADD      R1,SP,#+0
   \   00000026   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000002A   0x.... 0x....      BL       TIM_TimeBaseInit
    352          
    353              /* TIM2 enable counter */
    354              TIM_Cmd(TIM2, ENABLE);
   \   0000002E   0x2101             MOVS     R1,#+1
   \   00000030   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000034   0x.... 0x....      BL       TIM_Cmd
    355          
    356              /* Immediate load of TIM2 Precaler value */
    357              TIM_PrescalerConfig(TIM2, 0xEA5F, TIM_PSCReloadMode_Immediate);
   \   00000038   0x2201             MOVS     R2,#+1
   \   0000003A   0xF64E 0x215F      MOVW     R1,#+59999
   \   0000003E   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000042   0x.... 0x....      BL       TIM_PrescalerConfig
    358          
    359              /* Clear TIM2 update pending flag */
    360              TIM_ClearFlag(TIM2, TIM_FLAG_Update);
   \   00000046   0x2101             MOVS     R1,#+1
   \   00000048   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000004C   0x.... 0x....      BL       TIM_ClearFlag
    361          
    362              /* Enable TIM2 Update interrupt */
    363              TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
   \   00000050   0x2201             MOVS     R2,#+1
   \   00000052   0x2101             MOVS     R1,#+1
   \   00000054   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000058   0x.... 0x....      BL       TIM_ITConfig
    364          }
   \   0000005C   0xBD07             POP      {R0-R2,PC}       ;; return
    365          

   \                                 In section .text, align 2, keep-with-next
    366          void MyTIM2_Init()
    367          {
   \                     MyTIM2_Init:
   \   00000000   0xB580             PUSH     {R7,LR}
    368          	NVIC_InitTypeDef NVIC_InitStructure;
    369          	
    370          	//Puts("MyTIM2_Init() Start!\n");
    371          	
    372          	/* Enable TIM2 clock */
    373              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
    374              
    375          
    376              /* Enable the TIM2 Interrupt */
    377              NVIC_InitStructure.NVIC_IRQChannel = BSP_INT_ID_TIM2;
   \   0000000A   0x201C             MOVS     R0,#+28
   \   0000000C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    378              //NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    379              //NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    380              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xF88D 0x0003      STRB     R0,[SP, #+3]
    381              NVIC_Init(&NVIC_InitStructure);
   \   00000016   0xA800             ADD      R0,SP,#+0
   \   00000018   0x.... 0x....      BL       NVIC_Init
    382              
    383          	
    384              BSP_IntVectSet(BSP_INT_ID_TIM2, MyISR_TIM2);
   \   0000001C   0x....             LDR.N    R1,??DataTable6_25
   \   0000001E   0x201C             MOVS     R0,#+28
   \   00000020   0x.... 0x....      BL       BSP_IntVectSet
    385              
    386              TIM2_Configuration();       
   \   00000024   0x.... 0x....      BL       TIM2_Configuration
    387              
    388              //Puts("MyTIM2_Init() End!\n");
    389          }
   \   00000028   0xBD01             POP      {R0,PC}          ;; return
    390          

   \                                 In section .text, align 4, keep-with-next
    391          void Task1(void *data)
    392          {
   \                     Task1:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    393          	for (;;) {
    394          		Puts((char *)data);
   \                     ??Task1_0:
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       Puts
    395                  OSTimeDly(5);                          
   \   0000000A   0x2005             MOVS     R0,#+5
   \   0000000C   0x.... 0x....      BL       OSTimeDly
   \   00000010   0xE7F8             B.N      ??Task1_0
    396          	}
    397          }
    398          

   \                                 In section .text, align 4, keep-with-next
    399          void Task2(void *data)
    400          {
   \                     Task2:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    401             	for (;;) {
    402          		Puts((char *)data);
   \                     ??Task2_0:
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       Puts
    403          		OSTimeDly(2);     
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x.... 0x....      BL       OSTimeDly
   \   00000010   0xE7F8             B.N      ??Task2_0
    404          	}
    405          }
    406          
    407          
    408          /*
    409          *********************************************************************************************************
    410          *********************************************************************************************************
    411          *                                          uC/OS-II APP HOOKS
    412          *********************************************************************************************************
    413          *********************************************************************************************************
    414          */
    415          
    416          #if (OS_APP_HOOKS_EN > 0)
    417          /*
    418          *********************************************************************************************************
    419          *                                      TASK CREATION HOOK (APPLICATION)
    420          *
    421          * Description : This function is called when a task is created.
    422          *
    423          * Argument(s) : ptcb   is a pointer to the task control block of the task being created.
    424          *
    425          * Note(s)     : (1) Interrupts are disabled during this call.
    426          *********************************************************************************************************
    427          */
    428          

   \                                 In section .text, align 2, keep-with-next
    429          void  App_TaskCreateHook (OS_TCB *ptcb)
    430          {
    431          #if ((APP_OS_PROBE_EN   == DEF_ENABLED) && \
    432               (OS_PROBE_HOOKS_EN == DEF_ENABLED))
    433              //OSProbe_TaskCreateHook(ptcb);
    434          #endif
    435          }
   \                     App_TaskCreateHook:
   \   00000000   0x4770             BX       LR               ;; return
    436          
    437          /*
    438          *********************************************************************************************************
    439          *                                    TASK DELETION HOOK (APPLICATION)
    440          *
    441          * Description : This function is called when a task is deleted.
    442          *
    443          * Argument(s) : ptcb   is a pointer to the task control block of the task being deleted.
    444          *
    445          * Note(s)     : (1) Interrupts are disabled during this call.
    446          *********************************************************************************************************
    447          */
    448          

   \                                 In section .text, align 2, keep-with-next
    449          void  App_TaskDelHook (OS_TCB *ptcb)
    450          {
    451              (void)ptcb;
    452          }
   \                     App_TaskDelHook:
   \   00000000   0x4770             BX       LR               ;; return
    453          
    454          /*
    455          *********************************************************************************************************
    456          *                                      IDLE TASK HOOK (APPLICATION)
    457          *
    458          * Description : This function is called by OSTaskIdleHook(), which is called by the idle task.  This hook
    459          *               has been added to allow you to do such things as STOP the CPU to conserve power.
    460          *
    461          * Argument(s) : none.
    462          *
    463          * Note(s)     : (1) Interrupts are enabled during this call.
    464          *********************************************************************************************************
    465          */
    466          
    467          #if OS_VERSION >= 251

   \                                 In section .text, align 2, keep-with-next
    468          void  App_TaskIdleHook (void)
    469          {
    470          }
   \                     App_TaskIdleHook:
   \   00000000   0x4770             BX       LR               ;; return
    471          #endif
    472          
    473          /*
    474          *********************************************************************************************************
    475          *                                        STATISTIC TASK HOOK (APPLICATION)
    476          *
    477          * Description : This function is called by OSTaskStatHook(), which is called every second by uC/OS-II's
    478          *               statistics task.  This allows your application to add functionality to the statistics task.
    479          *
    480          * Argument(s) : none.
    481          *********************************************************************************************************
    482          */
    483          

   \                                 In section .text, align 2, keep-with-next
    484          void  App_TaskStatHook (void)
    485          {
    486          }
   \                     App_TaskStatHook:
   \   00000000   0x4770             BX       LR               ;; return
    487          
    488          /*
    489          *********************************************************************************************************
    490          *                                        TASK SWITCH HOOK (APPLICATION)
    491          *
    492          * Description : This function is called when a task switch is performed.  This allows you to perform other
    493          *               operations during a context switch.
    494          *
    495          * Argument(s) : none.
    496          *
    497          * Note(s)     : (1) Interrupts are disabled during this call.
    498          *
    499          *               (2) It is assumed that the global pointer 'OSTCBHighRdy' points to the TCB of the task that
    500          *                   will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
    501          *                  task being switched out (i.e. the preempted task).
    502          *********************************************************************************************************
    503          */
    504          
    505          #if OS_TASK_SW_HOOK_EN > 0

   \                                 In section .text, align 2, keep-with-next
    506          void  App_TaskSwHook (void)
    507          {
    508          #if ((APP_OS_PROBE_EN   == DEF_ENABLED) && \
    509               (OS_PROBE_HOOKS_EN == DEF_ENABLED))
    510              //OSProbe_TaskSwHook();
    511          #endif
    512          }
   \                     App_TaskSwHook:
   \   00000000   0x4770             BX       LR               ;; return
    513          #endif
    514          
    515          /*
    516          *********************************************************************************************************
    517          *                                     OS_TCBInit() HOOK (APPLICATION)
    518          *
    519          * Description : This function is called by OSTCBInitHook(), which is called by OS_TCBInit() after setting
    520          *               up most of the TCB.
    521          *
    522          * Argument(s) : ptcb    is a pointer to the TCB of the task being created.
    523          *
    524          * Note(s)     : (1) Interrupts may or may not be ENABLED during this call.
    525          *********************************************************************************************************
    526          */
    527          
    528          #if OS_VERSION >= 204

   \                                 In section .text, align 2, keep-with-next
    529          void  App_TCBInitHook (OS_TCB *ptcb)
    530          {
    531              (void)ptcb;
    532          }
   \                     App_TCBInitHook:
   \   00000000   0x4770             BX       LR               ;; return
    533          #endif
    534          
    535          /*
    536          *********************************************************************************************************
    537          *                                        TICK HOOK (APPLICATION)
    538          *
    539          * Description : This function is called every tick.
    540          *
    541          * Argument(s) : none.
    542          *
    543          * Note(s)     : (1) Interrupts may or may not be ENABLED during this call.
    544          *********************************************************************************************************
    545          */
    546          
    547          #if OS_TIME_TICK_HOOK_EN > 0

   \                                 In section .text, align 2, keep-with-next
    548          void  App_TimeTickHook (void)
    549          {
    550          #if ((APP_OS_PROBE_EN   == DEF_ENABLED) && \
    551               (OS_PROBE_HOOKS_EN == DEF_ENABLED))
    552              //OSProbe_TickHook();
    553          #endif
    554          }
   \                     App_TimeTickHook:
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x40013800         DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x40013804         DC32     0x40013804

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x40010800         DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     `?<Constant "\\nmain start!\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     `?<Constant "\\nBSP_IntDisAll() done!\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     `?<Constant "\\nOSInit() done!\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     App_TaskStartStk+0x1FC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     `?<Constant "Start Task">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x........         DC32     `?<Constant "\\nOSStart() done!\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x........         DC32     `?<Constant "\\nApp_TaskStart() start!\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x........         DC32     `?<Constant "\\nBSP_Init() done_%d!\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x........         DC32     `?<Constant "\\nOS_CPU_SysTickInit()...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   0x........         DC32     `?<Constant "\\nMyTIM2_Init() Done!\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \   00000000   0x........         DC32     Task1_Stk+0x7FC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \   00000000   0x........         DC32     `?<Constant "Task1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_15:
   \   00000000   0x........         DC32     `?<Constant "\\nTask1 Create(err:%d)\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_16:
   \   00000000   0x........         DC32     Task2_Stk+0x7FC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_17:
   \   00000000   0x........         DC32     `?<Constant "Task2">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_18:
   \   00000000   0x........         DC32     `?<Constant "\\nTask2 Create(err:%d)\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_19:
   \   00000000   0x........         DC32     OSTaskCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_20:
   \   00000000   0x........         DC32     `?<Constant "\\nRunning Task : %5d\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_21:
   \   00000000   0x........         DC32     OSCPUUsage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_22:
   \   00000000   0x........         DC32     `?<Constant "Cpu Usage : %3d\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_23:
   \   00000000   0x........         DC32     OSCtxSwCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_24:
   \   00000000   0x........         DC32     `?<Constant "Context Switches per ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_25:
   \   00000000   0x........         DC32     MyISR_TIM2

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nmain start!\\n">`:
   \   00000000   0x0A 0x6D          DC8 "\012main start!\012"
   \              0x61 0x69    
   \              0x6E 0x20    
   \              0x73 0x74    
   \              0x61 0x72    
   \              0x74 0x21    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nBSP_IntDisAll() done!\\n">`:
   \   00000000   0x0A 0x42          DC8 "\012BSP_IntDisAll() done!\012"
   \              0x53 0x50    
   \              0x5F 0x49    
   \              0x6E 0x74    
   \              0x44 0x69    
   \              0x73 0x41    
   \              0x6C 0x6C    
   \              0x28 0x29    
   \              0x20 0x64    
   \              0x6F 0x6E    
   \              0x65 0x21    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nOSInit() done!\\n">`:
   \   00000000   0x0A 0x4F          DC8 "\012OSInit() done!\012"
   \              0x53 0x49    
   \              0x6E 0x69    
   \              0x74 0x28    
   \              0x29 0x20    
   \              0x64 0x6F    
   \              0x6E 0x65    
   \              0x21 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Start Task">`:
   \   00000000   0x53 0x74          DC8 "Start Task"
   \              0x61 0x72    
   \              0x74 0x20    
   \              0x54 0x61    
   \              0x73 0x6B    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nOSStart() done!\\n">`:
   \   00000000   0x0A 0x4F          DC8 "\012OSStart() done!\012"
   \              0x53 0x53    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x28 0x29    
   \              0x20 0x64    
   \              0x6F 0x6E    
   \              0x65 0x21    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nApp_TaskStart() start!\\n">`:
   \   00000000   0x0A 0x41          DC8 "\012App_TaskStart() start!\012"
   \              0x70 0x70    
   \              0x5F 0x54    
   \              0x61 0x73    
   \              0x6B 0x53    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x28 0x29    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x21 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nBSP_Init() done_%d!\\n">`:
   \   00000000   0x0A 0x42          DC8 "\012BSP_Init() done_%d!\012"
   \              0x53 0x50    
   \              0x5F 0x49    
   \              0x6E 0x69    
   \              0x74 0x28    
   \              0x29 0x20    
   \              0x64 0x6F    
   \              0x6E 0x65    
   \              0x5F 0x25    
   \              0x64 0x21    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nOS_CPU_SysTickInit()...">`:
   \   00000000   0x0A 0x4F          DC8 "\012OS_CPU_SysTickInit() done!\012"
   \              0x53 0x5F    
   \              0x43 0x50    
   \              0x55 0x5F    
   \              0x53 0x79    
   \              0x73 0x54    
   \              0x69 0x63    
   \              0x6B 0x49    
   \              0x6E 0x69    
   \              0x74 0x28    
   \              0x29 0x20    
   \              0x64 0x6F    
   \              0x6E 0x65    
   \              0x21 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nMyTIM2_Init() Done!\\n">`:
   \   00000000   0x0A 0x4D          DC8 "\012MyTIM2_Init() Done!\012"
   \              0x79 0x54    
   \              0x49 0x4D    
   \              0x32 0x5F    
   \              0x49 0x6E    
   \              0x69 0x74    
   \              0x28 0x29    
   \              0x20 0x44    
   \              0x6F 0x6E    
   \              0x65 0x21    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Task1">`:
   \   00000000   0x54 0x61          DC8 "Task1"
   \              0x73 0x6B    
   \              0x31 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nTask1 Create(err:%d)\\n">`:
   \   00000000   0x0A 0x54          DC8 "\012Task1 Create(err:%d)\012"
   \              0x61 0x73    
   \              0x6B 0x31    
   \              0x20 0x43    
   \              0x72 0x65    
   \              0x61 0x74    
   \              0x65 0x28    
   \              0x65 0x72    
   \              0x72 0x3A    
   \              0x25 0x64    
   \              0x29 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Task2">`:
   \   00000000   0x54 0x61          DC8 "Task2"
   \              0x73 0x6B    
   \              0x32 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nTask2 Create(err:%d)\\n">`:
   \   00000000   0x0A 0x54          DC8 "\012Task2 Create(err:%d)\012"
   \              0x61 0x73    
   \              0x6B 0x32    
   \              0x20 0x43    
   \              0x72 0x65    
   \              0x61 0x74    
   \              0x65 0x28    
   \              0x65 0x72    
   \              0x72 0x3A    
   \              0x25 0x64    
   \              0x29 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nRunning Task : %5d\\n">`:
   \   00000000   0x0A 0x52          DC8 "\012Running Task : %5d\012"
   \              0x75 0x6E    
   \              0x6E 0x69    
   \              0x6E 0x67    
   \              0x20 0x54    
   \              0x61 0x73    
   \              0x6B 0x20    
   \              0x3A 0x20    
   \              0x25 0x35    
   \              0x64 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Cpu Usage : %3d\\n">`:
   \   00000000   0x43 0x70          DC8 "Cpu Usage : %3d\012"
   \              0x75 0x20    
   \              0x55 0x73    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x3A 0x20    
   \              0x25 0x33    
   \              0x64 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Context Switches per ...">`:
   \   00000000   0x43 0x6F          DC8 "Context Switches per Sec : %5d\012"
   \              0x6E 0x74    
   \              0x65 0x78    
   \              0x74 0x20    
   \              0x53 0x77    
   \              0x69 0x74    
   \              0x63 0x68    
   \              0x65 0x73    
   \              0x20 0x70    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x65 0x63    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x35 0x64    
   \              0x0A 0x00    
    555          #endif
    556          #endif
    557          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   App_TCBInitHook
       0   App_TaskCreateHook
       0   App_TaskDelHook
       0   App_TaskIdleHook
     136   App_TaskStart
       136   -> BSP_Init
       136   -> BSP_LED_Off
       136   -> GPIO_Configuration
       136   -> MyTIM2_Init
       136   -> OSStatInit
       136   -> OSTaskCreate
       136   -> OSTimeDlyHMSM
       136   -> OS_CPU_SysTickInit
       136   -> Puts
       136   -> USART1_Init
       136   -> sprintf
       0   App_TaskStatHook
       0   App_TaskSwHook
       0   App_TimeTickHook
       8   GPIO_Configuration
         8   -> GPIO_Init
         8   -> RCC_APB2PeriphClockCmd
       8   GetChar
         8   -> PutChar
       8   Gets
         8   -> GetChar
       8   MyISR_TIM2
         8   -> BSP_LED_Toggle
         8   -> TIM_ClearITPendingBit
       8   MyTIM2_Init
         8   -> BSP_IntVectSet
         8   -> NVIC_Init
         8   -> RCC_APB1PeriphClockCmd
         8   -> TIM2_Configuration
       8   PutChar
         8   -> PutChar
       8   Puts
         8   -> PutChar
      16   TIM2_Configuration
        16   -> TIM_ClearFlag
        16   -> TIM_Cmd
        16   -> TIM_ITConfig
        16   -> TIM_PrescalerConfig
        16   -> TIM_TimeBaseInit
       8   Task1
         8   -> OSTimeDly
         8   -> Puts
       8   Task2
         8   -> OSTimeDly
         8   -> Puts
      24   USART1_Init
        24   -> USART_Cmd
        24   -> USART_Init
       8   main
         8   -> BSP_IntDisAll
         8   -> GPIO_Configuration
         8   -> OSInit
         8   -> OSStart
         8   -> OSTaskCreate
         8   -> OSTaskNameSet
         8   -> Puts
         8   -> USART1_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      32  ?<Constant "Context Switches per ...">
      20  ?<Constant "Cpu Usage : %3d\n">
      12  ?<Constant "Start Task">
       8  ?<Constant "Task1">
       8  ?<Constant "Task2">
      28  ?<Constant "\nApp_TaskStart() start!\n">
      24  ?<Constant "\nBSP_Init() done_%d!\n">
      24  ?<Constant "\nBSP_IntDisAll() done!\n">
      24  ?<Constant "\nMyTIM2_Init() Done!\n">
      20  ?<Constant "\nOSInit() done!\n">
      20  ?<Constant "\nOSStart() done!\n">
      32  ?<Constant "\nOS_CPU_SysTickInit()...">
      24  ?<Constant "\nRunning Task : %5d\n">
      24  ?<Constant "\nTask1 Create(err:%d)\n">
      24  ?<Constant "\nTask2 Create(err:%d)\n">
      16  ?<Constant "\nmain start!\n">
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_17
       4  ??DataTable6_18
       4  ??DataTable6_19
       4  ??DataTable6_2
       4  ??DataTable6_20
       4  ??DataTable6_21
       4  ??DataTable6_22
       4  ??DataTable6_23
       4  ??DataTable6_24
       4  ??DataTable6_25
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
       2  App_TCBInitHook
       2  App_TaskCreateHook
       2  App_TaskDelHook
       2  App_TaskIdleHook
     206  App_TaskStart
     512  App_TaskStartStk
       2  App_TaskStatHook
       2  App_TaskSwHook
       2  App_TimeTickHook
      72  GPIO_Configuration
      42  GetChar
      32  Gets
      20  MyISR_TIM2
      42  MyTIM2_Init
      30  PutChar
      22  Puts
      94  TIM2_Configuration
      18  Task1
    2048  Task1_Stk
      18  Task2
    2048  Task2_Stk
      60  USART1_Init
      78  main

 
 4 608 bytes in section .bss
   340 bytes in section .rodata
   852 bytes in section .text
 
   852 bytes of CODE  memory
   340 bytes of CONST memory
 4 608 bytes of DATA  memory

Errors: none
Warnings: none
